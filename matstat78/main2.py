import math
import statistics as st
import scipy.stats as sps
import numpy as np
import matplotlib.pyplot as plt
def hyp_test(m, n, alpha, F_quant = 0):
    state = np.random.get_state()
    # print("state: ", state)

    distrib = sps.norm.rvs(size=100)

    x_sample = np.random.choice(distrib, size=m, replace=False)
    y_sample = np.random.choice(distrib, size=n, replace=False)

    np.random.set_state(state)

    x_sqr = [(x_sample[i] - np.mean(x_sample)) ** 2 for i in range(m)]
    y_sqr = [(y_sample[i] - np.mean(y_sample)) ** 2 for i in range(n)]

    plt.hist(x_sample, bins=5, density=True, color='lightblue', alpha=0.5, label=f'—Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ {m}')
    plt.hist(y_sample, bins=5, density=True, color='yellow', alpha=0.5, label=f'—Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ {n}')
    plt.hist(distrib, bins=5, density=True, color='crimson', alpha=0.5, label='–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ n = 100')
    plt.title("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –≤—ã–±–æ—Ä–æ–∫ –∏–∑ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏")
    plt.legend(loc='best')
    plt.show()

    # –Ω–µ—Å–º–µ—â–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–∏—Å–ø–µ—Äc–∏–π

    s_x = sum(x_sqr) / (m - 1)
    print("S_x = ", s_x)
    s_y = sum(y_sqr) / (n - 1)
    print("S_y = ", s_y)

    if s_x > s_y:
        F_b = s_x / s_y
    else:
        F_b = s_y / s_x

    F_quant = sps.f(m - 1, n - 1).ppf(1 - alpha / 2)
    print("F_quant = ", F_quant)
    print("F_B = ", F_b)

    print('%.2f' % s_x, "&", '%.2f' % s_y, "&", '%.2f' % F_b, "&", '%.2f' % F_quant, "\\\\ \\hline\n")

    if F_quant > F_b:
        print("\nF_quant > F_b => –≥–∏–ø–æ—Ç–µ–∑–∞ ùêª_0 –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è\n\n")
        return True
    else:
        print("\nF_quant <= F_b => –≥–∏–ø–æ—Ç–µ–∑–∞ ùêª_0 –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è: –≤—ã–±–µ—Ä–µ–º –æ–¥–Ω–æ –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö"
              " —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n")
        return False


print("\nNormal distribution; size = 100; m = 20, n = 40; alpha = 0.05\n")
hyp_test(20, 40, 0.05)

print("\nNormal distribution; size = 100; m = 20, n = 100; alpha = 0.05\n")
hyp_test(20, 100, 0.05)